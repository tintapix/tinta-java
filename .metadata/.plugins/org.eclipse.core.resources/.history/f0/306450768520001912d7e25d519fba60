/**
 * Copyright (C) 2011 - 2019 Mikhail Evdokimov 
 * tintapix.com
 * tintapix@gmail.com
 */

package com.tinta.math;
import java.util.Random;

import com.tinta.common.image.tintaRGB;
import com.tinta.common.image.tintaRGBA;

/**
 * Util math static class
 * @author Mikhail Evdokimov
 *
 */
public class tintaUtilMath {
	
	
	public static final int IEEE_FLOAT_MANTISSA_BITS	= 23;
	public static final int IEEE_FLOAT_EXPONENT_BITS	= 8;
	public static final int IEEE_FLOAT_EXPONENT_BIAS	= 127;
	public static final int IEEE_FLOAT_SIGN_BIT			= 31;

	public static final int IEEE_DOUBLE_MANTISSA_BITS	= 52;
	public static final int IEEE_DOUBLE_EXPONENT_BITS	= 11;
	public static final int IEEE_DOUBLE_EXPONENT_BIAS	= 1023;
	public static final int IEEE_DOUBLE_SIGN_BIT		= 63;

	public static final int IEEE_DBLE_MANTISSA_BITS	= 63;
	public static final int IEEE_DBLE_EXPONENT_BITS	= 15;
	public static final int IEEE_DBLE_EXPONENT_BIAS	= 0;
	public static final int IEEE_DBLE_SIGN_BIT		= 79;
	
	static final int colorMask[] = { 255, 0 };
	
	public static final float PI = (float) Math.PI;

	public static float PI_2 = PI * 2.0f;
	
	public static float PI_HALF = PI * 0.5f;

	public static final float DEG_TO_RAD = PI / 180.0f;
	
	public static final float RAD_TO_DEG = 180.0f / PI;	
	
	public static float clamp(float x, float a, float b){

		return (x < a ? a : (x > b ? b : x));
	}
	
	public static short floatToByte(float c) {		
		return (short)( (int)(c * 255.0f) & colorMask[Float.floatToIntBits( c ) >> IEEE_FLOAT_SIGN_BIT] );
	}
	
	public static  float byteToFloat(short val) {
		return clamp((float)((val & 0x0000ff) / 255.f), 0.0f, 1.0f);
	}
	
	public static double tintaLerp( double val1, double val2, double factor ){
		
		if ( factor <= 0. ) {
			return val1;
		} else if ( factor >= 1. ) {
			return val2;
		} else {
			return val1 + ( val2 - val1) * factor;
		}
	}
	
	public static float tintaLerp( float val1, float val2, float factor ){
		
		return (float)tintaLerp( (double)val1, (double)val2, (double)factor );
	}
	
	public static final Random rand = new Random(System.nanoTime());
	
	public static tintaRGB unpackColor3( int color ) {
		
		return new tintaRGB( (short)((color >> 16 ) & 255 ),
		(short)( ( color >> 8 ) & 255 ), 
		(short)( ( color >> 0 ) & 255 ));	
	}
	
	public static  int packColor3( int r, int g, int b  ){		
		return packColor3( (short) r, (short) g, (short) b  );
	}
	
	
	public static  int packColor3( short r, short g, short b  ){		
		return ( r << 16 ) | ( g << 8 ) | ( b << 0 );
	}
	
	public static tintaRGBA unpackColor4( int color ) {
		
		return new tintaRGBA( (short)((color >> 24 ) & 255 ),
				(short)( (color >> 16 ) & 255 ),
				(short)( ( color >> 8 ) & 255 ), 
				(short)( ( color >> 0 ) & 255 ));	
	}
	
	public static  int packColor4( int r, int g, int b , int a){		
		return packColor4( (short) r, (short) g, (short) b, (short) a  );
	}
		
	public static  int packColor4( short r, short g, short b , short a ){		
		return ( r << 24 ) | ( g << 16 ) | ( b << 8 ) | ( a << 0 );
	}
	
	public static final float radToDeg(final float rad) {
		return RAD_TO_DEG * rad;
	}

	public static final float degToRad(final float degree) {
		return DEG_TO_RAD * degree;
	}

	public static final float atan2(final float dY, final float dX) {
		return (float)Math.atan2(dY, dX);
	}
		
	public static final int randsign() {
		if( rand.nextBoolean() ) {
			return 1;
		} else {
			return -1;
		}
	}

	public static final float randReal(final float minV, final float maxV) {
		return minV + rand.nextFloat() * (maxV - minV);
	}
	
	public static final int rand( int minV, int maxV ) {
		return minV + rand.nextInt(maxV - minV + 1);
	}

	public static final int nextPowerOfTwo(final int n) {
		int k = n;

		if (k == 0) {
			return 1;
		}

		k--;

		for (int i = 1; i < 32; i <<= 1) {
			k = k | k >> i;
		}

		return k + 1;
	}
	
	public static final double cos( final double a ){
		return Math.cos(a);
	}
	
	public static final float cos( final float a ){
		return (float)cos((float)a);
	}
	
	public static final float cosInterp(final float a, final float b,final float x){
		float ft = x * PI;			
		float f = ( 1.f - cos( ft ) ) * 0.5f;
		return  (( 1.f - f)* a) + (f * b);
	}
	
	public static final boolean isPowerOfTwo( final int v ) {
		return ( ( v != 0 ) && ( v & ( v - 1 ) ) == 0 );
	}

	public static final int nextPowerOfTwo( final float f ) {
		return nextPowerOfTwo( (int)( Math.ceil(f) ) );
	}

	public static final int sum(final int[] vals) {
		int sum = 0;
		for(int i = vals.length - 1; i >= 0; i--) {
			sum += vals[i];
		}

		return sum;
	}

	public static final float sum(final float[] pValues) {
		float sum = 0;
		final int valueCount = pValues.length;
		for(int i = 0; i < valueCount; i++) {
			sum += pValues[i];
		}
		return sum;
	}

	public static final float tintaArrayAverage(final float[] pValues) {
		return sum(pValues) / pValues.length;
	}

	public static final boolean inBounds(final int minV, final int maxV, final int v) {
		return v >= minV && v <= maxV;
	}

	public static final boolean inBounds(final float minV, final float maxV, final float v) {
		return v >= minV && v <= maxV;
	}

	public static final double sqrt(double v){
		return Math.sqrt(v);
	}
	
	public static final float sqrt(float v){
		return sqrt(v);
	}
	
	public static final float distance(final float x1, final float y1, final float x2, final float y2){
		final float dX = x2 - x1;
		final float dY = y2 - y1;
		return sqrt((dX * dX) + (dY * dY));
	}
	
	public static final float length(final float x, final float y){
		return sqrt((x * x) + (y * y));
	}
	
	public static final float floor(final float v){
		return floor(v);
	}
	
	public static final double floor(final double v){
		return Math.floor(v);
	}
	
	public static final float ceil(final float v){
		return ceil(v);
	}
	
	public static final double ceil(final double v){
		return Math.ceil(v);
	}
	
	public static final  double exp(double val)	{
		return Math.exp(val);
	}
	
	public static final  float exp(float val)	{
		return exp(val);
	}
	
	public static final float mix(final float pX, final float pY, final float pMix) {
		return pX * (1 - pMix) + pY * pMix;
	}

	
	public static final int mix(final int pX, final int pY, final float pMix) {
		return Math.round(pX * (1 - pMix) + pY * pMix);
	}

	public static final boolean isEven(final int v) {
		return v % 2 == 0;
	}

	public static final boolean isOdd(final int v) {
		return v % 2 == 1;
	}

	public static float dot(final float pXA, final float pYA, final float pXB, final float pYB) { 
		return pXA * pXB + pYA * pYB;
	}

	public static float cross(final float pXA, final float pYA, final float pXB, final float pYB) { 
		return pXA * pYB - pXB * pYA;
	}
	

}
