package com.tinta.tintaLuaApp;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import com.tinta.common.lua.tintaLua;



public class tintaLuaThread implements Runnable {
		
	private tintaLua mLua;
	private tintaLuaConsole.ScriptData mScript;
	private boolean mIsFile;
	private tintaIExecuted mFinishCallback = null;
	private final Lock lock  = new ReentrantLock();
	private final Condition condition = lock.newCondition();
	public tintaLuaThread() {
		
	}
	public void setParams( tintaLua lua, tintaLuaConsole.ScriptData script, boolean isFile, tintaIExecuted onFinish){
		mLua = lua;
		mScript = script;
		mIsFile = isFile;
		mFinishCallback = onFinish;
		lock.lock();
		condition.notify();
		lock.unlocklock();
	}
	
	public tintaLuaThread( tintaLua lua, tintaLuaConsole.ScriptData script, boolean isFile, tintaIExecuted onFinish ) {
		mLua = lua;
		mScript = script;
		mIsFile = isFile;	
		mFinishCallback = onFinish; 
	}
	
	
	public void run() {
		
		lock.lock();
		
		try {
			try
			{
				condition.await();
			}
			catch (InterruptedException ie)
			{
				ie.printStackTrace();
			}
			
			if( mLua != null && mScript.mBuffer.length() > 0 ){
						
				if( mScript.mData != null ){
					
					mLua.bindData(mScript.mData);
				}
				
				if( mIsFile ) {
					System.out.print("lua.executeFile");
					mLua.executeFile( mScript.mBuffer );
				}
				else
					mLua.executeBuffer( mScript.mBuffer );
	    	
				if( mScript.mData != null ){						
					mLua.bindData(null);				
				}
	
				if( mFinishCallback != null )
					mFinishCallback.onFinish();
					
				
				//System.out.print("after run()");
			}
			
			
			try
			{
				condition.await();
			}
			catch (InterruptedException ie)
			{
				ie.printStackTrace();
			}
		}
		finally{
			lock.unlock();
		}
    }
}
